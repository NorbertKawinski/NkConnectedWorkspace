/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package net.kawinski.connectedworkspace.application.client;

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioSocketChannel;
import lombok.extern.slf4j.Slf4j;
import net.kawinski.connectedworkspace.protocol.MessageDecoder;

@Slf4j
public class Client {

    private final ClientConfig config;
    private final MessageExecutor messageExecutor;

    public Client(ClientConfig config, MessageExecutor messageExecutor) {
        this.config = config;
        this.messageExecutor = messageExecutor;
    }

    public void run() throws Exception {
        log.info("Starting client");
        String host = config.getServerHost();
        int port = config.getServerPort();

        EventLoopGroup workerGroup = new NioEventLoopGroup();
        try {
            Bootstrap b = new Bootstrap();
            b.group(workerGroup);
            b.channel(NioSocketChannel.class);
            b.option(ChannelOption.SO_KEEPALIVE, true);
            b.handler(new ChannelInitializer<SocketChannel>() {
                @Override
                public void initChannel(SocketChannel ch) throws Exception {
                    ch.pipeline().addLast(new MessageDecoder(), new ClientHandler(messageExecutor));
                }
            });

            log.info("Connecting to server @ " + host + ":" + port);
            ChannelFuture f = b.connect(host, port).sync();

            log.info("Client started; Waiting until connection is closed");
            f.channel().closeFuture().sync();
        } finally {
            workerGroup.shutdownGracefully();
        }
    }

}
